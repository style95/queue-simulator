package style95.generator

import scala.concurrent.duration._
import scala.language.postfixOps

import akka.actor.{ActorRef, Props}

// Scenario builder provides methods for building a simulation scenario that comprises
// a sequence of interval behaviors.
object ScenarioBuilder {
  def startsWith(behavior: IntervalBehavior) =
    new ScenarioBuilder(List(behavior))
}

class ScenarioBuilder(val sequence: List[IntervalBehavior])
    extends BehaviorActorBuilder {

  def next(behavior: IntervalBehavior): ScenarioBuilder = {
    val newSeq = behavior :: sequence
    new ScenarioBuilder(newSeq)
  }

  override def against(recv: ActorRef): Props =
    SequentialBehaviorActor.props(sequence.reverse, recv)

  override def runningDuration: FiniteDuration =
    sequence.map(_.duration).foldLeft(0 second)(_ + _)
}

trait BehaviorDescriptor {
  def timing: TimingGenerator
}

// A timing generator can generate timings that indicate when the next request should be sent.
// Because some behavior may not be stationary, i.e., the timing sequence has variable mean value,
// we provide an `elapsed` argument so that the generator can adapt its strategy.
trait TimingGenerator {
  // `elapsed`: Time elapsed since the first invocation of `next`.
  def next(elapsed: FiniteDuration): FiniteDuration
}

// The request sequence generated by a stationary behavior has a fixed mean value.
// That is, the request distribution is stationary.
// Thus, this trait provides a helper method `in` to easily add an duration bound
// to a behavior descriptor.
trait Stationary { this: BehaviorDescriptor =>
  def in(duration: FiniteDuration): IntervalBehavior =
    WrappedIntervalBehavior(this, duration)

}

case class WrappedIntervalBehavior(behavior: BehaviorDescriptor,
                                   duration: FiniteDuration)
    extends IntervalBehavior

// A behavior actor builder can build an akka actor that send requests to `recv`.
trait BehaviorActorBuilder {
  // `recv`: receiver actor of requests
  def against(recv: ActorRef): Props
  // `runningDuration` is used by the simulator to decide when to shutdown
  // the simulation.
  def runningDuration: FiniteDuration
}

// An interval behavior consists of a behavior and a duration.
// The behavior encapsulates the logic about how to generate request timings.
// And the duration indicates how long the behavior runs.
trait IntervalBehavior extends BehaviorActorBuilder {
  def behavior: BehaviorDescriptor
  def duration: FiniteDuration

  override def against(recv: ActorRef): Props =
    SingleBehaviorActor.props(this, recv)

  override def runningDuration: FiniteDuration = duration
}
